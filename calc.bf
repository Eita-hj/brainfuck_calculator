//左側の数〜符号までの受付ゾーン
+								//終了判定用
[>,.							//とりあえず取得
	>++++						//符号ゾーン 0→無視 1→割り算 2→引き算 3→足し算 4→掛け算
	>++++++[-<<------->>]<<		//42(掛け算)判定から
	[>-<
		-[>-<					//43(足し算判定)
			--[>-<				//45(引き算判定)
				--[				//47(掛け算判定)
					-			//数値化
					>-			//符号削除
					
					>>[
						-<<<++++++++++>>>	//ストックを10倍して加算
					]<<<[->>>+<<<]
				]
			]
		]					
	]
	>[[->+<]<<->>]
<<]

//右側の数〜=までの受付ゾーン
+													//終了フラグ
[,.													//とりあえず取得
	[->+>+<<]										//1番目から2・3番目にコピー(片方は判定用)
	++++++++[->------>------<<]+					//2・3番目は数値化して1番目を終了フラグに戻す
	>[-[-[-[-[-[-[-[-[-[<->[-]]]]]]]]]]]<			//もうめんどくさいので58以上あったら=と判定し数値フラグを消す
	[>>>>>[-<<<++++++++++>>>]<<<[->>>+<<<]<+<-]		//ループ抜けるために一旦2番目に終了フラグを移動
	>[-<+>]<										//終了フラグが2番目にあったら1番目に持ってくる
]
>[-]>[-]>		//メモリ空にして符号の場所へ

//計算処理
>>>+<<<		//計算終了フラグ。重複計算防止用
-[
	-[
		-[
			//掛け算
			>[->[-<<<+<<+>>>>>]<<<[->>>+<<<]>>]
			>[-]>-
			<<<[-]
		]>>>[
			//足し算
			<[-<<<<<+>>>>>]
			<[-<<<<+>>>>]
			>>-
		]<<<
	]>>>[
		//引き算
		<<<[-]+		//符号の変数を計算終了フラグに

		//最初にどちらかが0だったら計算しないようにする
		<+
		[
			-
			>>[<<<+>>>[-<<<<+>>>>]]<<<<[->>>>+<<<<]
			>>>>>[<<<<+>>>>[-<<<<<+>>>>>]]<<<<<[->>>>>+<<<<<]
			>>
		]
		<[-[
			>>+<<[-]
		]]
		>>-
		[
			>>[-[<<+>>[-<<<+>>>]]]	//両方から1引いて計算終了フラグを＋1する
			<[-[<+>[-<<<+>>>]]]		//ただし引いた後に0ならフラグは追加しない
			<
			[-[-[					//フラグが3(最初の1&直前の2)だったら計算続行
				<<<+>>>[-]			//計算終了フラグを仮の場所へ移動
			]]]
			<<<[->>>+<<<]			//計算終了フラグを戻す
			>[->>>+<<<]				//両方の数を元の位置に戻す
			>[->>>+<<<]
			>
		]
		>[-<<<<+>>>>]					//4・5番目のどちらかに答えとなる数が入っているので和を計算
		>[<<<<+>>>>[-<<<<<+>>>>>]]		//ただしこっちに数がある場合は2番目に負の数のフラグを追加
		>-
	]<<<
]>>>[
	//割り算は引き算の反復でなんとかしたい
	<<[-<+>]<[>>>>>+<<<<<[->+<]]>>>				//計算終了フラグ(0/nならつけない)
	>+<											//NaNフラグ
	<[>>-<<[-<<+>>]]<<[->>+<<]>>				//割る数が0だったらNaNフラグはいじらない
	>>[->[-]<<<<<+>>>>]<<<<[->>>>+<<<<]>>>>>	//NaNなら計算終了フラグを消す

	<<<<<[-]>[-<+<+>>]<<[->>+<<]>>>>>>			//余りとして一旦保管
	[
		-<<<<									//計算終了フラグを消す(割られる数が0にならなかったら止めるため)
		-[>>>>+<<<<[-<<+>>]]<<[->>+<<]			//割られる数を減らす
		<+>>>>									//割っ切ったかどうかのフラグ
		->>>>+<<<<[<<<<->>>>[-<<<+>>>]]<<<[->>>+<<<]					//割る数を1引いて割り切ったかどうかのフラグを設定
		<[-<+>>>>>>>>>[-<<<<+>>>>]<<<<<<[-]>[-<+<+>>]<<[->>+<<]<]		//割り切っているなら商を＋1して割る数を戻して余りを更新
		>>>>>>>
	]
	<[[-<<<<<<+>>>>>>]<<<<[-]>>>>]	//NaNフラグがあれば移動
	>>[-]<[-]<[-]<[-]<[-]<[-]<		//余計な値は削除
	[-<+>]			//余りも移動
	>>>
]
//残りの数の処理
<<<
+	//計算フラグ(NaNなら計算しない)
<<
[		//負の数orNaN判定
	<[[->>+<<]>>>-<<<]		//一旦計算フラグを0→数字、1→NaNに設定
	>>[
		//負の数のとき
		[-<<+>>]
		>>+++++[->+++++++++<]>.[-]<
		+<<
	]>[
		//NaNのとき
		>+++++++++[->+++++++++<]>---.	//N
		<+++[->++++++<]>+.		//a
		<+++[->------<]>-.[-]		//N
		<<-
	]
	>[-<+>]		//ここで計算フラグを復活させる
	<<<-
]

>>[
	//NaNではない時
	>>>+<<<
	//1番小さい桁が10未満だったらループ終了
	[
		[
			<<<[->+>>>+<<<<]>>>>[-<<<<+>>>>]
			+	//10未満判定用
			<<<
			[-[-[-[-[-[-[-[-[-[
				<[-]>-[-<+>]
				>>>-
				>>[>]<+	//1つ上の桁の数字＋1
				[<]
				<<<<
			]]]]]]]]]]>>>[-
				<->>>[>]<[->>+<<]<[<]<<<<<		//最上位の桁の数字を2つ右にシフト
				[->>>>>>[>]>+<<[<]<<<<<]		//最上位の桁の数字の1つ左に結果を移動
				>>>>>>[>]>+[-<+>]>[-<+>]		//シフトした数を戻す
				
				<[<]<
			]<
		]
		>>>[>]<
		[->+>>+>+<<<<]>>>>[-<<<<+>>>>]<<<
		[-[-[-[-[-[-[-[-[-[-[
			//最上桁が10以上の場合
			[<]<<+>>>[>]<
			[-]>>-[-<<<[<]<<<<<+>>>>>>[>]>>]		//最上桁の数を持ってくる
			<<<[-]+>								//ストックの最上位の数は消す
		]]]]]]]]]]]
		>>[-]<<<<[<]<<
	]

	//あとは出力
	>>>[>]<
	-[->+<]>[-<+>]<[+>]<		//最上位の桁が0だったとき消す
	[
		[>++++++[-<++++++++>]<-.[<]>[>]<[-]]<
	]
	<<<[
		//余りがあった場合…を出力してもう一回ループさせる
		>++++++[->++++++++<]>--...[-]<<
		[-<<+>>]
		>+<
	]>
]<<<
